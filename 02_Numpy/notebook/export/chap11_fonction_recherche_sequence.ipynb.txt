{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercices\n",
    "\n",
    "## Exercice utiliser une fonction pour rechercher une séquence\n",
    "\n",
    "L'objectif de cet exercice est de déterminer la première position dans chaque ligne du tableau **dataNumbers** de la séquence **w** ci-dessous.\n",
    "\n",
    "1. Créez une fonction **search_word** qui prendra en paramètre : une liste d'entiers (séquence à chercher). Cette fonction retournera la position de la première occurence de la séquence à rechercher.\n",
    "\n",
    "Dans l'exemple suivant search_word(w) doit retourner l'indice 2.\n",
    "\n",
    "```python\n",
    "w = [1,2,3,4]\n",
    "line =  [ 6,  9,  1,  2,  3,  4,  3,  1,  4,  3,  9,  6,  2,  2]\n",
    "```\n",
    "\n",
    "2. Utilisez maintenant cette fonction avec les données du tableau **dataNumbers**. Trouvez toutes les positions des séquences dans chacune des lignes du tableau, si la séquence n'existe pas retournez None. Pour appliquer une fonction à un tableau Numpy vous utiliserez la fonction **apply_along_axis**, voyez l'exemple ci-dessous :\n",
    "\n",
    "```python\n",
    "\n",
    "# paramètres : fonction, axis = 0, 1, dataset\n",
    "np.apply_along_axis(search_word, 1, dataNumbers)\n",
    "```\n",
    "\n",
    "Vous retournerez un tableau de dimension 1 avec les positions de chacune des séquences si elles existent et None sinon.\n",
    "\n",
    "```python\n",
    "\n",
    "w = [1, 2, 3, 4]\n",
    "\n",
    "dataNumbers = np.array([\n",
    "       [ 6,  3,  3,  7,  7,  4,  7,  8,  5,  3,  7,  8,  4,  2],\n",
    "       [ 6,  9,  1,  2,  3,  4,  3,  1,  4,  3,  9,  6,  2,  2],\n",
    "       [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n",
    "       [ 4,  9,  2,  1,  1,  2,  3,  4,  3,  1,  9,  8,  2,  6],\n",
    "       [ 3,  2,  9,  9,  2,  3,  6,  9,  8,  2,  1,  2,  3,  4],\n",
    "       [ 1,  4,  1,  2,  3,  4,  4,  5,  8,  8,  1,  5,  7,  1],\n",
    "       [ 1,  4,  3,  8,  2,  1,  2,  3,  4,  3,  9,  3,  5,  8],\n",
    "       [ 7,  8,  8,  5,  1,  8,  3,  3,  6,  1,  2,  3,  4,  7],\n",
    "       [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n",
    "       [ 7,  7,  1,  6,  1,  2,  3,  4,  9,  2,  4,  4,  5,  9],\n",
    "       [ 5,  6,  6,  2,  3,  7,  1,  9,  9,  5,  1,  2,  3,  4],\n",
    "       [ 7,  7,  2,  3,  3,  7,  9,  4,  3,  9,  1,  1,  1,  1],\n",
    "       [ 6,  1,  2,  3,  4,  5,  5,  3,  1,  3,  1,  2,  3,  4]\n",
    "       ],dtype=int8\n",
    ")\n",
    "\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
