{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Extraire des données\n",
    "\n",
    "## 11. Extraire des données avec un opérateur\n",
    "\n",
    "Vous pouvez utiliser des opérateurs de comparaison pour extraire des données d'un array; c'est très pratique lorsqu'on souhaite extraire uniquement une partie des données selon un critère :\n",
    "\n",
    "```python\n",
    "a = np.array([1, 2, 3, 4, 5, 6 ,7])\n",
    "print(a[ a > 3])\n",
    "# array([4, 5, 6, 7])\n",
    "```\n",
    "\n",
    "Vous pouvez utiliser l'opérateur modulo pour extraire des valeurs paires d'un array par exemple :\n",
    "\n",
    "```python\n",
    "\n",
    "a = np.array([9,100,7, 88, 90, 11, 2 ])\n",
    "\n",
    "a[ a % 2 == 0]\n",
    "# array([100,  88,  90,   2])\n",
    "\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Extraire les nombres supérieurs à 2 :\n",
    "\n",
    "```python\n",
    "\n",
    "a = np.array([9,100,7, 88, 90, 11, 2 ])\n",
    "\n",
    "b = a > 2\n",
    "# array([\n",
    "# True,  True,  True,  True,  True,  True, False], dtype=bool)\n",
    "\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Puis il faut appliquer le mask (indexation avancée) :\n",
    "\n",
    "```python\n",
    "\n",
    "a[b]\n",
    "# array([  9, 100,   7,  88,  90,  11])\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pour un tableau à deux dimensions :\n",
    "\n",
    "```python\n",
    "\n",
    "d = np.array([\n",
    "    [ 1, 2, 3, 4, 5 ],\n",
    "    [ 7, 8, 13, 14, 50 ],\n",
    "    [ 9,89, 0, 78, 1],\n",
    "    [ 11, 21, 37, 14, 107 ]\n",
    "])\n",
    "\n",
    "print(d > 10)\n",
    "\n",
    "# Le mask appliqué retournera un tableau 1d avec les valeurs vérifiées par la condition\n",
    "print( d[ d > 10 ])\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[False False False False False]\n",
      " [False False  True  True  True]\n",
      " [False  True False  True False]\n",
      " [ True  True  True  True  True]]\n",
      "[ 13  14  50  89  78  11  21  37  14 107]\n"
     ]
    }
   ],
   "source": [
    "d = np.array([\n",
    "    [ 1, 2, 3, 4, 5 ],\n",
    "    [ 7, 8, 13, 14, 50 ],\n",
    "    [ 9,89, 0, 78, 1],\n",
    "    [ 11, 21, 37, 14, 107 ]\n",
    "])\n",
    "\n",
    "print(d > 10)\n",
    "\n",
    "print( d[ d > 10 ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Comparaison de deux tableaux Numpy :\n",
    "\n",
    "```python\n",
    "\n",
    "# Ou comparer deux array de même dimension\n",
    "a = np.array([1, 2, 3, 4, 5, 6 ,7])\n",
    "b = np.array([10, 20, 3, 4, 5, 6 ,7])\n",
    "b > a\n",
    "# array([ True,  True, False, False,\n",
    "# False, False, False], dtype=bool)\n",
    "\n",
    "# Vous pouvez appliquer le mask à un des deux tableaux\n",
    "a[a>b]\n",
    "\n",
    "```\n",
    "\n",
    "Vous pouvez également compter avec un mask :\n",
    "\n",
    "```python\n",
    "np.sum( a > 2 )\n",
    "```\n",
    "\n",
    "En utilisant la méthode all de Numpy vous pouvez appliquer une comparaison totale sur les valeurs du tableau :\n",
    "\n",
    "```python\n",
    "# Retourne True si tous les éléments sont supérieur à 0\n",
    "# et False sinon.\n",
    "np.all(a > 0)\n",
    "```\n",
    "\n",
    "Les opérateurs logique **ET** et **OU** que vous connaissez en Python changent en Numpy, dans un mask vous devez écrire :\n",
    "\n",
    "- Pour le ET on écrira : &\n",
    "- Pour le OU on écrira : |\n",
    "\n",
    "En effet, Numpy manipule des bits pour encoder les valeurs dans un tableau.\n",
    "\n",
    "```python\n",
    "a = np.arange(1, 100)\n",
    "\n",
    "mask1 = (a > 0) & (a < 10)\n",
    "mask2 = (a > 0) & (a < 10) | (a > 12) & ( a < 100 >)\n",
    "\n",
    "a[mask2]\n",
    "\"\"\"\n",
    "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9,\n",
    "       13, 14, 15, 16, 17, 18, 19, 20, 21\n",
    "       22, 23, 24, 25, 26, 27, 28, 29, ..., 99])\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "La méthode **np.all** retournera True si la condition est vérifiée pour tous les éléments dans la comparaison.\n",
    "\n",
    "La méthode **np.any** retournera True si au moins une valeur de la comparaison est vraie.\n",
    "\n",
    "```python\n",
    "a = np.arange(1, 10)\n",
    "b = np.arange(1, 10)\n",
    "\n",
    "# Retourne un tableau de boolean\n",
    "print( a == b )\n",
    "\n",
    "# retourne True ou False, ici True\n",
    "print('all', np.all(a == b))\n",
    "\n",
    "# On change la première valeur\n",
    "a[0] = 100\n",
    "print('all', np.all(a == b))\n",
    "\n",
    "# Pour la méthode np.any\n",
    "c = np.array([1,2, 7])\n",
    "d = np.array([3, 4, 5])\n",
    "# Retounera True\n",
    "print('any', np.any( c > d ) )\n",
    "\n",
    "e = np.array([1,2, 0])\n",
    "f = np.array([3, 4, 5])\n",
    "# Retournera False\n",
    "print('any', np.any( e > f ))\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ True  True  True  True  True  True  True  True  True]\n",
      "all True\n",
      "all False\n",
      "any True\n",
      "any False\n"
     ]
    }
   ],
   "source": [
    "a = np.arange(1, 10)\n",
    "b = np.arange(1, 10)\n",
    "\n",
    "# Retourne un tableau de boolean\n",
    "print( a == b )\n",
    "\n",
    "# retourne True ou False, ici True\n",
    "print('all', np.all(a == b))\n",
    "\n",
    "# On change la première valeur\n",
    "a[0] = 100\n",
    "print('all', np.all(a == b))\n",
    "\n",
    "# Pour la méthode np.any\n",
    "c = np.array([1,2, 7])\n",
    "d = np.array([3, 4, 5])\n",
    "# Retounera True\n",
    "print('any', np.any( c > d ) )\n",
    "\n",
    "e = np.array([1,2, 0])\n",
    "f = np.array([3, 4, 5])\n",
    "# Retournera False\n",
    "print('any', np.any( e > f ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Supprimer des lignes avec des données manquantes\n",
    "\n",
    "Souvent dans les datasets des données manquent. Elles ont le type NaN dans Numpy. Pour qu'un tableau Numpy puisse contenir ce type de données manquantes il doit avoir le type float64 :\n",
    "\n",
    "```python\n",
    "\n",
    "# Sans définir le type du tableau celui-ci aura le type float64\n",
    "x = np.array([[1,2,3], [4,5,np.nan], [7,8,9]])\n",
    "\n",
    "print(x.dtype)\n",
    "# float64\n",
    "\n",
    "```\n",
    "\n",
    "La méthode np.isnan suivante permet de créer un masque sur les données manquent du tableau :\n",
    "\n",
    "```python\n",
    "np.isnan(x)\n",
    "\"\"\"\n",
    "[[False False False]\n",
    " [False False  True]\n",
    " [False False False]]\n",
    "\"\"\"\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
